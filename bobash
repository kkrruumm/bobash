#!/usr/bin/env bash
confdir="${XDG_CONFIG_HOME:-$HOME/.config}/bobash"

if [ ! -d "$confdir" ] ; then
    mkdir "$confdir" ||
        { echo 'Creating config directory has failed.' ; exit 1 ; }
fi

if [ ! -f "$confdir"/config ]; then
    echo 'server="https://share.boba.best/api/v1"' >> "$confdir"/config ||
        { echo "Creating default config at $confdir/config has failed." ; exit 1 ; }

    echo 'logdir="${XDG_DATA_HOME:-$HOME/.local/share}/bobash"' >> "$confdir"/config ||
        { echo "Creating default config at $confdir/config has failed." ; exit 1 ; }

    echo 'stripping="false"' >> "$confdir"/config ||
        { echo "Creating default config at $confdir/config has failed." ; exit 1 ; }
fi

. "$confdir"/config ||
    { echo "Sourcing config file at $confdir/config has failed." ; exit 1 ; }

for i in echo curl file jq cat
do
    if ! which "$i" &>/dev/null ; then
        echo "$i command not found in PATH. Cannot proceed."
        exit 1
    fi
done

help() {
    echo -e "bobash - bash client for bobashare\n
All uploads will be logged to $logdir/log, and IDs/delete keys can be found there.\n
bobash upload file - Uploads file to the specified bobashare server.
bobash delete -i <id> -k <deletekey> - Deletes ID on the specified bobashare server.
bobash log - Outputs contents of $logdir/log.\n
A few settings may be changed in $confdir/config,\n
server - Set the API url for the target bobashare server.
logdir - Set the logging directory for bobash uploads.
stripping - Enable or disable exif data stripping from uploads, depends on exiftool. Valid values are true or false, defaults to false.\n
On uploads exiftool cannot strip, assuming stripping is enabled, you may add the --keep-exif flag to disable exif stripping on a per-upload basis."
}

upload() {
    [ -d "$logdir" ] ||
        { mkdir "$logdir" || echo "Failed to create log directory." ; exit 1 ; }

    [ -e "$1" ] ||
        { echo "$1 not found. Cannot proceed." ; exit 1 ; }

    if [ "$stripping" == "true" ]; then
        if ! which exiftool &>/dev/null ; then
            echo "exiftool not found in PATH, yet stripping is enabled. Cannot continue."
            exit 1
        fi

        echo "Stripping exif data from $1..."
        exiftool -all= "$1" ||
            { echo "Stripping exif data from $1 has failed." ; exit 1 ; }
    else
        echo "Proceeding without exif data stripping..."
    fi

    local mime=$(file --mime-type "$1")
    local mime="${mime#*: }"

    echo "Uploading $1..."
    local upload=$(curl -H "Content-Type: $mime" -T "$1" "$server/upload/" | jq) ||
        { echo "Failed to upload $1." ; exit 1 ; }

    echo "$upload"
    echo "Logging to $logdir/log..."
    echo "$upload" >> "$logdir/log" ||
        { echo "Logging upload to $logdir/log has failed." ; exit 1 ; }
}

delete() {
    echo "Deleting $id..."
    curl -X DELETE "$server/delete/$id" -d "$key" | jq ||
        { echo 'Failed to delete.' ; exit 1 ; }
}

log() {
    if [ -f "$logdir"/log ]; then
        cat "$logdir"/log
    else
        echo "$logdir/log does not appear to exist. Cannot output log contents."
    fi
}

[[ "$@" =~ "--keep-exif" ]] &&
    stripping="false"

case "$1" in
    upload) upload "$2" ;;
    delete)
        shift
        while getopts "i:k:" opts; do
            case "${opts}" in
                i) id="${OPTARG}" ;;
                k) key="${OPTARG}" ;;
            esac
        done

        delete
    ;;
    log) log ;;
    *) help ;;
esac
